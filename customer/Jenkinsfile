pipeline{
    agent any
    tools {
	nodejs 'NodeJS 20.18.1'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKERHUB_REPO_NAME = 'registry.cloudemon.me/devops-620/customer'
        DOCKER_IMAGE_TAG = "${env.GIT_COMMIT[0..6]}"
    }
    stages{
        stage('Unit test'){
	    steps{		
            	dir(path: 'customer'){
            	    sh 'echo $DOCKER_IMAGE_TAG'
                    sh 'npm install'
                    sh 'npm run test'
                }
            }
        }
        stage('SonarQube analysis'){
            steps{
                dir('./customer'){
                    withSonarQubeEnv('sonar-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectKey=Devops-620 \
                        -Dsonar.sources=. \
                    '''
                }
                }
            }
        }
        // stage('Quality Gate'){
        //     steps{
        //         // dir('./customer'){
        //         // timeout(time: 5, unit: 'MINUTES') {
        //         //     waitForQualityGate abortPipeline: false
        //         // }
        //         // }
        //         script {
        //             try {
        //                 timeout(time: 1, unit: 'HOURS') {
        //                     echo "Checking quality gate..."
        //                     def qg = waitForQualityGate()
        //                     echo "Quality gate status: ${qg.status}"
        //                 }
        //             } catch (Exception e) {
        //                 echo "Error: ${e.getMessage()}"
        //                 error "Quality gate failed"
        //             }
        //         }
        //     }
        // }
        stage('Scan filesystem'){
            steps{
                dir('./customer'){
                    sh 'trivy fs . > trivy_scan_fs.txt'
                    sh 'cat trivy_scan_fs.txt'
                }
            }
        }
        stage('Build Docker image'){
            steps{
                dir(path: 'customer'){
                    script{
                        docker.build("${env.DOCKERHUB_REPO_NAME}:${env.DOCKER_IMAGE_TAG}")
                    }
                }
            }
        }
        stage('Scan Docker image'){
            steps{
                dir('./customer'){
                    sh "trivy image ${env.DOCKERHUB_REPO_NAME}:${env.DOCKER_IMAGE_TAG} > trivy_scan_image.txt"
                    sh 'cat trivy_scan_image.txt'
                }
                
            }
        }
        stage("Docker Image Pushing") {
            steps {
            	withDockerRegistry(url: 'http://registry.cloudemon.me', credentialsId: 'harbor-token') {
                sh "docker push ${env.DOCKERHUB_REPO_NAME}:${env.DOCKER_IMAGE_TAG}"
                }
			}
        }

    }
}
