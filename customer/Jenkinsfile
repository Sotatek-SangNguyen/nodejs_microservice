pipeline{
    agent any
    tools {
	nodejs 'NodeJS 20.18.1'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
	SERVICE_NAME = 'customer'
        DOCKERHUB_REPO_NAME = 'registry.cloudemon.me/devops-620/${SERVICE_NAME}'
        DOCKER_IMAGE_TAG = "${env.GIT_COMMIT[0..6]}"
        DOCKER_REGISTRY_URL = "registry.cloudemon.me"
    }
    stages{
        stage('Unit test'){
	    steps{		
            	dir(path: '${SERVICE_NAME}'){
            	    sh 'echo $DOCKER_IMAGE_TAG'
                    sh 'npm install'
                    sh 'npm run test'
                }
            }
        }
        stage('SonarQube analysis'){
            steps{
                dir('./${SERVICE_NAME}'){
                    withSonarQubeEnv('sonar-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectKey=Devops-620 \
                        -Dsonar.sources=. \
                    '''
                }
                }
            }
        }
        stage('Scan filesystem'){
            steps{
                dir('./${SERVICE_NAME}'){
                    sh 'trivy fs . > trivy_scan_fs.txt'
                    sh 'cat trivy_scan_fs.txt'
                }
            }
        }
        stage('Build Docker image'){
            steps{
                dir(path: '${SERVICE_NAME}'){
                    script{
                        docker.build("${env.DOCKERHUB_REPO_NAME}:${env.DOCKER_IMAGE_TAG}")
                    }
                }
            }
        }
        stage('Scan Docker image'){
            steps{
                dir('./${SERVICE_NAME}'){
                    sh "trivy image ${env.DOCKERHUB_REPO_NAME}:${env.DOCKER_IMAGE_TAG} > trivy_scan_image.txt"
                    sh 'cat trivy_scan_image.txt'
                }
                
            }
        }
        stage("Docker Image Pushing") {
            steps {
            	withCredentials([usernamePassword(
                    credentialsId: 'harbor-token',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh """
                        docker login ${DOCKER_REGISTRY_URL} -u \${DOCKER_USER} -p \${DOCKER_PASS}
                        docker push ${env.DOCKERHUB_REPO_NAME}:${env.DOCKER_IMAGE_TAG}
                         """
                    }
			}
        }

    }
}
