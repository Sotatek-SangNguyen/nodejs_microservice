pipeline{
    agent any
    tools {
	nodejs 'NodeJS 20.18.1'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        // DOCKERHUB_REPO_NAME = 'registry.cloudemon.me/devops-620/customer'
        DOCKER_IMAGE_TAG = "${env.GIT_COMMIT[0..6]}"
        DOCKER_REGISTRY_URL = "registry.cloudemon.me"
    }
    stages{
        stage('Prepare'){
            steps {
                script {
                    def services = [
                        'customer': 'customer/',
                        'products': 'products/',
                        'shopping': 'shopping/'
                    ]

                    services.each {
                        service, path ->
                            def isChanged = changeset "${path}"
                            if(isChanged){
                                echo "Service ${service} is changed"
                                env.SERVICE_NAME = service
                                env.DOCKERHUB_REPO_NAME = "registry.cloudemon.me/devops-620/${service}"
                            }
                    }
                }
                sh 'exit 1'
            }
        }
        stage('Unit test'){
            steps{		
                    dir(path: '${env.SERVICE_NAME}'){
                        sh 'echo $DOCKER_IMAGE_TAG'
                        sh 'npm install'
                        sh 'npm run test'
                    }
            }
        }
        stage('SonarQube analysis'){
            steps{
                dir('${env.SERVICE_NAME}'){
                    withSonarQubeEnv('sonar-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectKey=Devops-620 \
                        -Dsonar.sources=. \
                    '''
                }
                }
            }
        }
        // stage('Quality Gate'){
        //     steps{
        //         // dir('./customer'){
        //         // timeout(time: 5, unit: 'MINUTES') {
        //         //     waitForQualityGate abortPipeline: false
        //         // }
        //         // }
        //         script {
        //             try {
        //                 timeout(time: 1, unit: 'HOURS') {
        //                     echo "Checking quality gate..."
        //                     def qg = waitForQualityGate()
        //                     echo "Quality gate status: ${qg.status}"
        //                 }
        //             } catch (Exception e) {
        //                 echo "Error: ${e.getMessage()}"
        //                 error "Quality gate failed"
        //             }
        //         }
        //     }
        // }
        stage('Scan filesystem'){
            steps{
                dir('${env.SERVICE_NAME}'){
                    sh 'trivy fs . > trivy_scan_fs.txt'
                    sh 'cat trivy_scan_fs.txt'
                }
            }
        }
        stage('Build Docker image'){
            steps{
                dir(path: '${env.SERVICE_NAME}'){
                    script{
                        docker.build("${env.DOCKERHUB_REPO_NAME}:${env.DOCKER_IMAGE_TAG}")
                    }
                }
            }
        }
        stage('Scan Docker image'){
            steps{
                dir('${env.SERVICE_NAME}'){
                    sh "trivy image ${env.DOCKERHUB_REPO_NAME}:${env.DOCKER_IMAGE_TAG} > trivy_scan_image.txt"
                    sh 'cat trivy_scan_image.txt'
                }
                
            }
        }
        stage("Docker Image Pushing") {
            steps {
            	withCredentials([usernamePassword(
                    credentialsId: 'harbor-token',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh """
                        echo ${DOCKER_USER}
                        docker login ${DOCKER_REGISTRY_URL} -u \${DOCKER_USER} -p \${DOCKER_PASS}
                        docker push ${env.DOCKERHUB_REPO_NAME}:${env.DOCKER_IMAGE_TAG}
                         """
                    }
			}
        }
    }
}
