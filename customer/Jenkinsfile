pipeline{
    agent any
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKERHUB_REPO_NAME = 'registry.cloudemon.me/devops-620/customer'
        DOCKER_IMAGE_TAG = "${env.GIT_COMMIT[0..6]}"
    }
    stages{
        stage('Unit test'){
            dir(path: 'customer'){
                steps{
                    sh 'npm install'
                    sh 'npm run test'
                }
            }
        }
        stage('SonarQube analysis'){
            steps{
                dir('./customer'){
                    withSonarQubeEnv('SonarQube') {
                    sh '''sonar-scanner \
                        -Dsonar.projectKey=Devops-620 \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://jenkins.cloudemon.me:9000 \
                        -Dsonar.login=squ_29aeb49ddbe8facea0f1d794179f33475af06632
                    '''
                }
                }
            }
        }
        stage('Quality Gate'){
            steps{
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Scan filesystem'){
            steps{
                dir('./customer'){
                    sh 'trivy fs . > trivy_scan_fs.txt'
                    sh 'cat trivy_scan_fs.txt'
                }
            }
        }
        stage('Build Docker image'){
            steps{
                dir(path: 'customer'){
                    script{
                        docker.build("${env.DOCKERHUB_REPO_NAME}:${env.DOCKER_IMAGE_TAG}")
                    }
                }
            }
        }
        stage('Scan Docker image'){
            steps{
                dir('./customer'){
                    sh 'trivy image ${env.DOCKERHUB_REPO_NAME}:${env.DOCKER_IMAGE_TAG} > trivy_scan_image.txt'
                    sh 'cat trivy_scan_image.txt'
                }
                
            }
        }
        stage("Docker Image Pushing") {
            steps {
            	withDockerRegistry(url: 'registry.cloudemon.me', credentialsId: 'docker-token') {
                sh 'docker push ${env.DOCKERHUB_REPO_NAME}:${env.DOCKER_IMAGE_TAG}'
                }
			}
        }

    }
}
